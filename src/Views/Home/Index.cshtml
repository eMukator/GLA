@model LogParser.Models.Log
@{ 
    ViewData["Source"] = Model.Source + "/";
}


    <div class="row mb-4">
        <div class="col">
            <h2>Scoring Definitions</h2>
            <dl>
                <dt>Kills</dt>
                <dd>Number of times a player kills another player.</dd>

                <dt>Frags</dt>
                <dd>A players Frag count is their Kills minus their Suicides. </dd>

                <dt>Deaths</dt>
                <dd>Number of times a Player has been killed by another player.</dd>


                <dt>Efficiency</dt>
                <dd>For Kills: Kills/(Kills+Deaths+Suicides+Team Kills)</dd>
                <dd>For vs. another Player: Kills vs. Player/(Kills Vs Player + Deaths by Player)</dd>

                <dd>For a Weapon: Kills with Weapon/(Kills with Weapon + Deaths while holding the Weapon + Suicides with the Weapon)</dd>

                <dt>FPH</dt>
                <dd>Frags Per Hour</dd>
                <dd>Frags/Time of Play (in Hours)</dd>
                <dd>Frags Per Hour can be used as a relative indicator of skill in a game where different players entered the game at different times.</dd>

                <dt>Avg. TTL</dt>
                <dd>A players Average Time to Live.</dd>

                <dd>This measures a players average amount of time in seconds they live after each respawn in a game.</dd>

                <dt>Killing Sprees</dt>
                <dd>
                    A Player who kills a large number of enemies without dying gains the special status of being on a &quot;Killing Spree.&quot;
                    List of the consecutive Frag counts at which various spree status is granted:
                    <ul class="list-unstyled ml-4">
                        <li>5 &ndash; Killing Spree!</li>
                        <li>10 &ndash; Rampage!</li>
                        <li>15 &ndash; Dominating!</li>
                        <li>20 &ndash; Unstoppable!</li>
                        <li>25 &ndash; God Like!</li>
                    </ul>
                </dd>
                <dd>Sprees are promoted to the next level when obtained, meaning a single instance of 10 kills with out dying counts as a single Rampage, not as a Killing Spree and a Rampage in your stats. Individual Sprees and why they ended during a particular game are listed in the Game Summaries section of that games stats.</dd>

                <dt>Multi Kills</dt>
                <dd>
                    Multi Kills are noted for each player. Every time a player makes a kill they have up to 3 seconds to make another kill. Go from one kill to two in less than 3 seconds and it is a Double Kill, get another kill in less than 3 seconds and it is a Multi kill, etc. The complete list in order is:
                    <ul class="list-unstyled ml-4">
                        <li>Double Kill</li>
                        <li>Multi Kill</li>
                        <li>Ultra Kill</li>
                        <li>Monster Kill</li>
                    </ul>
                </dd>
                <dd>Just as with Killing Sprees, Multi Kills are promoted to the next level. </dd>

                <dt>Head Shots</dt>
                <dd>Kills due to a precise shot to the head of the Victim, causing instant death.</dd>

                <dt>First Blood</dt>
                <dd>First player to get a kill in a game.</dd>

            </dl>
        </div>

        <div class="col-md-4 col-12">
            @{
                var excludedParams = new string[] { "gamename", "g_gametype", "mapname", "shortversion" };
                var lastGame = Model.LastGame;
                <table class="table table-striped table-sm table-bordered">
                    <tr>
                        <th colspan="2" class="bg-danger text-white text-center">Current Game - @Model.Created.ToString("g")</th>
                    </tr>
                    <tr>
                        <th>ID</th>
                        <td>@lastGame.Id</td>
                    </tr>
                    <tr>
                        <th>Duration</th>
                        <td>@lastGame.Duration.ToTimeSpan()</td>
                    </tr>
                    <tr>
                        <th>Game</th>
                        <td>@lastGame.Params["gamename"]</td>
                    </tr>
                    <tr>
                        <th>Game Version</th>
                        <td>@lastGame.Params["shortversion"]</td>
                    </tr>
                    <tr>
                        <th>Game Type</th>
                        <td>@lastGame.Params["g_gametype"]</td>
                    </tr>
                    <tr>
                        <th>Map</th>
                        <td>@lastGame.Params["mapname"]</td>
                    </tr>
                    <tr>
                        <td colspan="2" class="text-center"><img src="~/images/@(ViewData["Source"])maps/big/@(lastGame.Params["mapname"]).jpg" class="img-fluid" /></td>
                    </tr>
                    <tr>
                        <th>Players</th>
                        <td>@lastGame.Players.GroupBy(x => x.Name).Count()</td>
                    </tr>
                    <tr>
                        <th>Frags</th>
                        <td>@(lastGame.Players.Sum(x => x.Kills.Count) - lastGame.Players.Sum(x=> x.Sucides))</td>
                    </tr>
                    <tr>
                        <th>Kills</th>
                        <td>@lastGame.Players.Sum(x => x.Kills.Count)</td>
                    </tr>
                    <tr>
                        <th>Deaths</th>
                        <td>@lastGame.Players.Sum(x => x.Deaths.Count)</td>
                    </tr>
                    <tr>
                        <th>Suicides</th>
                        <td>@lastGame.Players.Sum(x => x.Sucides)</td>
                    </tr>
                    <tr>
                        <th>First Blood</th>
                        <td>@Html.Raw(lastGame.Players.SelectMany(x => x.Deaths).Where(x => x.DamageType != "MOD_SUICIDE").OrderBy(x => x.Time).FirstOrDefault()?.Player?.FormatToHtml())</td>
                    </tr>
                    @foreach (var param in lastGame.Params.Where(x => !excludedParams.Contains(x.Key)).OrderBy(x => x.Key))
                    {
                        <tr>
                            <th>@param.Key</th>
                            <td>@param.Value</td>
                        </tr>
                    }
                </table>
            }
        </div>

    </div>