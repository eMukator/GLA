@model LogParser.Models.PlayerViewModel

@{
    ViewData["Title"] = Model.Player;
    ViewData["Source"] = Model.Data.Source + "/";

    var elo = Elo.CalculateFor(Model.Data.Games);
    var player = Model.Data.Games.SelectMany(x => x.Players).Where(x => x.Name.PureName() == Model.Player);
    var playerEffRaw = Model.Data.Games.SelectMany(x => x.Players).Where(x => x.Name.PureName() == Model.Player).Select(x => (double)x.Kills.Count / (x.Kills.Count + x.Deaths.Count + x.Sucides) * 100);
    var playerEff = new List<double>();
    if (playerEffRaw.Count() > 0)
    {
        for (var i = 0; i < playerEffRaw.Count(); i++)
        {
            var s = Math.Max(i - 5, 0);
            var t = Math.Min(i + 5, playerEffRaw.Count() - 1);
            if (!playerEffRaw.Skip(s).Take(t - s).Any())
                continue;
            var v = Math.Round(playerEffRaw.Skip(s).Take(t - s).Average(), 1);
            playerEff.Add(v);
        }
    }

    var weapons = player.SelectMany(x => x.Weapons).GroupBy(x => x.Name)
        .Select(x => new
        {
            Name = x.Key,
            Kills = x.Sum(y => y.Kills),
            Deaths = x.Sum(y => y.Deaths),
            Hits = x.Sum(y => y.Hits),
            Hitted = x.Sum(y => y.Hitted),
        })
        .Select(x => new
        {
            x.Name,
            x.Kills,
            x.Deaths,
            x.Hits,
            x.Hitted,
            ToKill = x.Kills > 0 ? (double)(x.Hits + x.Kills) / x.Kills : 0,
            ToDeath = x.Deaths > 0 ? (double)(x.Hitted + x.Deaths) / x.Deaths : 0,
        })
        .OrderByDescending(x => x.Kills)
        .ThenByDescending(x => x.Deaths)
        .ToArray();

    var weaponsAll = Model.Data.Games.SelectMany(x => x.Players).Where(x => x.Name.PureName() != Model.Player).SelectMany(x => x.Weapons).GroupBy(x => x.Name)
        .Select(x => new
        {
            Name = x.Key,
            Kills = x.Sum(y => y.Kills),
            Deaths = x.Sum(y => y.Deaths),
            Hits = x.Sum(y => y.Hits),
            Hitted = x.Sum(y => y.Hitted),
        })
        .Select(x => new
        {
            x.Name,
            ToKill = x.Kills > 0 ? (double)(x.Hits + x.Kills) / x.Kills : 0,
        })
        .ToDictionary(x => x.Name, x => x.ToKill);


    async Task DrawDeltas(double val)
    {
        if (Math.Abs(Math.Round(val, 1)) == 0)
        {
            <text><i class="fa fa-equals"></i></text>
        }
        else if (val >= 0)
        {
            <text><i class="fa fa-arrow-up text-success"></i> +@Math.Round(val, 1)</text>
        }
        else
        {
            <text><i class="fa fa-arrow-down text-danger"></i> @Math.Round(val, 1)</text>
        }
    }
}

<nav aria-label="breadcrumb">
    <ol class="breadcrumb">
        <li class="breadcrumb-item"><a asp-area="" asp-controller="Home" asp-action="Index">Home</a></li>
        <li class="breadcrumb-item active" aria-current="page">Player: @Model.Player</li>
    </ol>
</nav>


<div class="row">

    <div class="col-12 mb-4">
        <table class="table table-striped table-bordered table-sm table-responsive-md">
            <thead>
                <tr>
                    <th colspan="16" class="bg-danger text-white text-center">Career Summary</th>
                </tr>
                <tr class="text-center">
                    <th>Name</th>
                    <th class="rotate90">Frags</th>
                    <th class="rotate90">Total Kills</th>
                    <th class="rotate90">Grenade Kills</th>
                    <th class="rotate90">Melee Kills</th>
                    <th class="rotate90">Head Shots</th>
                    <th class="rotate90">Deaths</th>
                    <th class="rotate90">Suicides</th>
                    <th class="rotate90">Efficiency</th>
                    <th class="rotate90">Frags Per Hour</th>
                    <th class="rotate90">Avg. Time to Live</th>
                    <th class="rotate90">Time</th>
                    <th class="rotate90">Wins</th>
                    <th class="rotate90">Losses</th>
                    <th class="rotate90">Games</th>
                    <th class="rotate90">ELO Rating</th>
                </tr>
            </thead>
            <tbody>
                <tr class="text-center">
                    <th>@Html.Raw(player.First().Name.FormatToHtml())</th>
                    <td>@(player.Sum(x => x.Kills.Count) - player.Sum(x => x.Sucides))</td>
                    <td>@player.Sum(x => x.Kills.Count)</td>
                    <td>@player.Sum(x => x.Kills.Count(x => x.DamageType == "MOD_GRENADE_SPLASH"))</td>
                    <td>@player.Sum(x => x.Kills.Count(x => x.DamageType == "MOD_MELEE"))</td>
                    <td>@player.Sum(x => x.Kills.Count(x => x.DamageType == "MOD_HEAD_SHOT"))</td>
                    <td>@player.Sum(x => x.Deaths.Count)</td>
                    <td>@player.Sum(x => x.Sucides)</td>
                    <td>@Math.Round((double)player.Sum(x => x.Kills.Count) / (player.Sum(x => x.Kills.Count) + player.Sum(x => x.Deaths.Count) + player.Sum(x => x.Sucides)) * 100, 1)%</td>
                    <td>@Math.Round((double)(player.Sum(x => x.Kills.Count) - player.Sum(x => x.Sucides)) / player.Sum(x => x.Duration.TotalHours), 1)</td>
                    <td>@Math.Round(player.Sum(x => x.Duration.TotalSeconds) / (player.Sum(x => x.Deaths.Count) + player.Sum(x => x.Sucides)), 1)</td>
                    <td>@TimeSpan.FromSeconds(player.Sum(x => x.Duration.TotalSeconds)).ToTimeSpan()</td>
                    <td>@player.Sum(x => x.Win ? 1 : 0)</td>
                    <td>@player.Sum(x => x.Win ? 0 : 1)</td>
                    <td>@player.Count()</td>
                    <td>@elo[player.First().Name.PureName()].ToString("0.00")</td>
                </tr>
            </tbody>
        </table>
    </div>


    <div class="col-12 mb-4">
        <table class="table table-striped table-borderless table-sm">
            <tr>
                <th class="bg-danger text-white text-center">Performance</th>
            </tr>
            <tr>
                <th><canvas class="my-4 w-100" id="myChart"></canvas></th>
            </tr>
        </table>
    </div>

    <div class="col-6 mb-4">
        <table class="table table-striped table-borderless table-sm">
            <tr>
                <th colspan="2" class="bg-danger text-white text-center">Multi Kills</th>
            </tr>
            <tr>
                <th>Double Kill</th>
                <td>@player.Sum(x => x.MultiKills.Count(y => y.Type == MultiKillType.DoubleKill))</td>
            </tr>
            <tr>
                <th>Multi Kill</th>
                <td>@player.Sum(x => x.MultiKills.Count(y => y.Type == MultiKillType.MultiKill))</td>
            </tr>
            <tr>
                <th>Ultra Kill</th>
                <td>@player.Sum(x => x.MultiKills.Count(y => y.Type == MultiKillType.UltraKill))</td>
            </tr>
            <tr>
                <th>Monster Kill</th>
                <td>@player.Sum(x => x.MultiKills.Count(y => y.Type == MultiKillType.MonsterKill))</td>
            </tr>
        </table>
    </div>

    <div class="col-6 mb-4">
        <table class="table table-striped table-borderless table-sm">
            <tr>
                <th colspan="2" class="bg-danger text-white text-center">Killing sprees</th>
            </tr>
            <tr>
                <th>Killing Spree!</th>
                <td>@player.Sum(x => x.KillingSprees.Count(y => y.Type == KillingSpreeType.KillingSpree))</td>
            </tr>
            <tr>
                <th>Rampage!</th>
                <td>@player.Sum(x => x.KillingSprees.Count(y => y.Type == KillingSpreeType.Rampage))</td>
            </tr>
            <tr>
                <th>Dominating!</th>
                <td>@player.Sum(x => x.KillingSprees.Count(y => y.Type == KillingSpreeType.Dominating))</td>
            </tr>
            <tr>
                <th>Unstoppable!</th>
                <td>@player.Sum(x => x.KillingSprees.Count(y => y.Type == KillingSpreeType.Unstoppable))</td>
            </tr>
            <tr>
                <th>God Like!</th>
                <td>@player.Sum(x => x.KillingSprees.Count(y => y.Type == KillingSpreeType.GodLike))</td>
            </tr>
        </table>
    </div>



    <div class="col-12 mb-4">
        <table class="table table-striped table-bordered table-sm table-responsive-lg">
            <thead class="text-center">
                <tr>
                    <th colspan="7" class="bg-danger text-white text-center">Weapons</th>
                </tr>
                <tr>
                    <th rowspan="2">Weapon</th>
                    <th rowspan="2" class="rotate90">Kills</th>
                    <th rowspan="2" class="rotate90">Deaths</th>
                    <th rowspan="2" class="rotate90">Shoots/Kill</th>
                    <th rowspan="2" class="rotate90">Hits/Death</th>
                    <th colspan="2">Difference to Average</th>
                </tr>
                <tr>
                    <th class="rotate90">Shoots/Kill</th>
                    <th class="rotate90">Hits/Death</th>
                </tr>
            </thead>
            <tbody class="text-center">
                @foreach (var weapon in weapons)
                {
                    <tr>
                        <td><img src="~/images/@(ViewData["Source"])weapons/small/@(weapon.Name).png" alt="@(weapon.Name)" title="@(weapon.Name)" class="img-fluid" /></td>
                        <td>@weapon.Kills</td>
                        <td>@weapon.Deaths</td>
                        <td>@Math.Round(weapon.ToKill, 2)</td>
                        <td>@Math.Round(weapon.ToDeath, 2)</td>
                        <td>@{ await DrawDeltas(weaponsAll[weapon.Name] - weapon.ToKill); }</td>
                        <td>@{ await DrawDeltas(weapon.ToDeath - weaponsAll[weapon.Name]); }</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>


</div>

@section Scripts{

    <script src="~/lib/moment/moment.min.js"></script>
    <script src="~/lib/chart/Chart.bundle.min.js"></script>
    <script src="~/lib/chart/chartjs-plugin-trendline.min.js"></script>

    <script type="text/javascript">

        var config = {
            type: 'line',
            data: {
                labels: [@String.Join(",", Model.Data.Games.SelectMany(x => x.Players).Where(x => x.Name.PureName() == Model.Player).Select((x,i) => i))],
                datasets:
                [
                    {
                        yAxisID: 'y-axis-1',
                        label: 'Kills',
                        lineTension: 0,
                        backgroundColor: '#000000',
                        borderColor: '#000000',
                        data: [@String.Join(",", Model.Data.Games.SelectMany(x => x.Players).Where(x => x.Name.PureName() == Model.Player).Select(x => x.Kills.Count()).ToInc())],
                        fill: false,
                        lineTension: 0,
                    },
                    {
                        yAxisID: 'y-axis-1',
                        label: 'Deaths',
                        lineTension: 0,
                        fill: false,
                        backgroundColor: '#FF0000',
                        borderColor: '#FF0000',
                        data: [@String.Join(",", Model.Data.Games.SelectMany(x => x.Players).Where(x => x.Name.PureName() == Model.Player).Select(x => x.Deaths.Count()).ToInc())],
                        lineTension: 0,
                    },
                    {
                        yAxisID: 'y-axis-3',
                        label: 'Avg. Efficiency',
                        lineTension: 0,
                        fill: false,
                        backgroundColor: '#FFCC00',
                        borderColor: '#FFCC00',
                        data: [@String.Join(",", playerEff)]
                    },
                    {
                        yAxisID: 'y-axis-2',
                        type: 'bar',
                        label: 'Suicides',
                        backgroundColor: '#CCCCCC',
                        borderColor: '#CCCCCC',
                        data: [@String.Join(",", Model.Data.Games.SelectMany(x => x.Players).Where(x => x.Name.PureName() == Model.Player).Select(x => x.Sucides).ToInc())],
                        fill: false
                    }
                ]
            },
            options: {
                responsive: true,
                title: {
                    display: false
                },
                scales: {
                    xAxes: [{
                        scaleLabel: {
                            display: true,
                            labelString: 'Game'
                        }
                    }],
                    yAxes: [{
                        id: 'y-axis-1',
                        position: 'left',
                        ticks: {
                            suggestedMin: 0,
                            suggestedMax: 10
                        },
                        scaleLabel: {
                            display: true,
                            labelString: 'Kills & Deaths'
                        }
                    },
                    {
                        id: 'y-axis-2',
                        position: 'right',
                        ticks: {
                            suggestedMin: 0,
                            suggestedMax: 10
                        },
                        scaleLabel: {
                            display: true,
                            labelString: 'Suicides'
                        }
                    },
                    {
                        id: 'y-axis-3',
                        position: 'right',
                        ticks: {
                            suggestedMin: 0,
                            suggestedMax: 100
                        },
                        scaleLabel: {
                            display: true,
                            labelString: 'Avg. Efficiency [%]'
                        }
                    }]
                }
            }
        };

        $(document).ready(function () {
            var ctx = document.getElementById('myChart').getContext('2d');
            var myChart = new Chart(ctx, config);
        });
    </script>
}
