@model LogParser.Models.Log

@{
    ViewData["Title"] = "High Scores";
    ViewData["Source"] = Model.Source + "/";

    var places = new string[] { "1st", "2nd", "3rd" };

    var elo = Elo.CalculateFor(Model.Games);

    async Task MostTableRowTemplate<T>(string rowName, HighScoreCareerHighsViewModel[] data, Func<HighScoreCareerHighsViewModel, T> score, Func<HighScoreCareerHighsViewModel, bool> where, string image = null, Func<HighScoreCareerHighsViewModel, T> format = null)
    {
        var items = data.OrderByDescending(score).Take(3).ToArray().Where(where).ToArray();
        if (format == null)
        {
            format = score;
        }

        if (items.Length > 0)
        {
            for (var i = 0; i < items.Length; i++)
            {
                <tr>
                    @if (i == 0)
                    {
                        @if (String.IsNullOrWhiteSpace(image))
                        {
                            <th rowspan="@(items.Length)">@rowName</th>
                        }
                        else
                        {
                            <th rowspan="@(items.Length)" data-toggle="tooltip" data-html="true" title='<img src="/images/@(ViewData["Source"])medals/normal/medal_@(image).png" />'>
                                <img src="/images/@(ViewData["Source"])medals/thumbs/medal_@(image).png" class="img-fluid" />
                                <div class="text-nowrap">@rowName</div>
                            </th>
                        }
                    }
                    @if (i == 0)
                    {
                        <th><i class="fas fa-medal no@(i + 1)"></i> @places[i]</th>
                        <th><a asp-area="" asp-controller="Home" asp-action="Player" asp-route-id="@items[i].Name.PureName()">@Html.Raw(items[i].Name.FormatToHtml())</a></th>
                        <th>@(format.Invoke(items[i]))</th>
                        <th>@items[i].Games</th>
                        <th>@TimeSpan.FromSeconds(items[i].Played).ToTimeSpan()</th>
                    }
                    else
                    {
                        <td><i class="fas fa-medal no@(i + 1)"></i> @places[i]</td>
                        <td><a asp-area="" asp-controller="Home" asp-action="Player" asp-route-id="@items[i].Name.PureName()">@Html.Raw(items[i].Name.FormatToHtml())</a></td>
                        <td>@(format.Invoke(items[i]))</td>
                        <td>@items[i].Games</td>
                        <td>@TimeSpan.FromSeconds(items[i].Played).ToTimeSpan()</td>
                    }
                </tr>
            }
        }
        else
        {
            <tr>
                @if (String.IsNullOrWhiteSpace(image))
                {
                    <th>@rowName</th>
                }
                else
                {
                    <th data-toggle="tooltip" data-html="true" title='<img src="/images/@(ViewData["Source"])medals/normal/medal_@(image).png" />'>@rowName</th>
                }
                <td>&mdash;</td>
                <td>&mdash;</td>
                <td>0</td>
                <td>0</td>
                <td>0s</td>
            </tr>
        }
    }

}



<nav aria-label="breadcrumb">
    <ol class="breadcrumb">
        <li class="breadcrumb-item"><a asp-area="" asp-controller="Home" asp-action="Index">Home</a></li>
        <li class="breadcrumb-item active" aria-current="page">High Scores</li>
    </ol>
</nav>


<div class="row">

    <div class="col-12 col-lg-6 mb-4">
        <table class="table table-striped table-bordered table-sm">
            <thead class="text-center">
                <tr>
                    <th colspan="6" class="bg-danger text-white text-center">Totals Logged</th>
                </tr>
                <tr class="text-center">
                    <th>Frags</th>
                    <th>Kills</th>
                    <th>Deaths</th>
                    <th>Suicides</th>
                    <th>Games</th>
                    <th>Player Time</th>
                </tr>
            </thead>
            <tbody class="text-center">
                <tr>
                    <td>@(Model.Games.Sum(x => x.Players.Sum(y => y.Kills.Count)) - Model.Games.Sum(x => x.Players.Sum(y => y.Sucides)))</td>
                    <td>@Model.Games.Sum(x => x.Players.Sum(y => y.Kills.Count))</td>
                    <td>@Model.Games.Sum(x => x.Players.Sum(y => y.Deaths.Count))</td>
                    <td>@Model.Games.Sum(x => x.Players.Sum(y => y.Sucides))</td>
                    <td>@Model.Games.Count</td>
                    <td>@TimeSpan.FromSeconds(Model.Games.Sum(x => x.Duration.TotalSeconds)).ToTimeSpan()</td>
                </tr>
            </tbody>
        </table>
    </div>


    <div class="col-12 col-lg-6 mb-4">
        <table class="table table-striped table-bordered table-sm">
            <thead class="text-center">
                <tr>
                    <th colspan="3" class="bg-danger text-white text-center">Total Games Played by Type</th>
                </tr>
                <tr class="text-center">
                    <th>Game</th>
                    <th>Number</th>
                    <th>Player Time</th>
                </tr>
            </thead>
            <tbody class="text-center">
                @foreach (var type in Model.Games.GroupBy(x => x.Params["g_gametype"]).OrderByDescending(x => x.Count()))
                {
                    <tr>
                        <td>@type.Key</td>
                        <td>@type.Count()</td>
                        <td>@TimeSpan.FromSeconds(type.Sum(x => x.Duration.TotalSeconds)).ToTimeSpan()</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>


    <div class="col-12 mb-4">
        <table class="table table-bordered table-sm">
            <thead class="text-center">
                <tr>
                    <th colspan="6" class="bg-danger text-white text-center">Career Highs</th>
                </tr>
                <tr class="text-center bg-dark text-white">
                    <th>Category</th>
                    <th colspan="2">Player</th>
                    <th>Score</th>
                    <th>Games Played</th>
                    <th>Time Played</th>
                </tr>
            </thead>
            @{
                var snipers = new string[] { "springfield_mp", "enfield_scope_mp", "kar98k_sniper_mp", "mosin_nagant_sniper_mp" };
                var most = Model.Games.SelectMany(x => x.Players).GroupBy(x => x.Name)
                    .Select(x => new HighScoreCareerHighsViewModel
                    {
                        Name = x.Key,
                        Frags = x.Sum(y => y.Kills.Count) - x.Sum(y => y.Sucides),
                        Kills = x.Sum(y => y.Kills.Count),
                        Deaths = x.Sum(y => y.Deaths.Count),
                        Suicides = x.Sum(y => y.Sucides),
                        HeadShots = x.Sum(y => y.Kills.Count(z => z.DamageType == "MOD_HEAD_SHOT")),
                        FPH = (double)x.Sum(y => y.Kills.Count) - x.Sum(y => y.Sucides) / TimeSpan.FromSeconds(x.Sum(y => y.Duration.TotalSeconds)).TotalHours,
                        Wins = x.Sum(y => y.Win ? 1 : 0),
                        Played = x.Sum(y => y.Duration.TotalSeconds),
                        Games = x.Count(),
                        DoubleKills = x.Sum(y => y.MultiKills.Count(z => z.Type == MultiKillType.DoubleKill)),
                        MultiKills = x.Sum(y => y.MultiKills.Count(z => z.Type == MultiKillType.MultiKill)),
                        UltraKills = x.Sum(y => y.MultiKills.Count(z => z.Type == MultiKillType.UltraKill)),
                        MonsterKills = x.Sum(y => y.MultiKills.Count(z => z.Type == MultiKillType.MonsterKill)),
                        KillingSprees = x.Sum(y => y.KillingSprees.Count(z => z.Type == KillingSpreeType.KillingSpree)),
                        Rampages = x.Sum(y => y.KillingSprees.Count(z => z.Type == KillingSpreeType.Rampage)),
                        Dominatings = x.Sum(y => y.KillingSprees.Count(z => z.Type == KillingSpreeType.Dominating)),
                        Unstoppables = x.Sum(y => y.KillingSprees.Count(z => z.Type == KillingSpreeType.Unstoppable)),
                        GodLikes = x.Sum(y => y.KillingSprees.Count(z => z.Type == KillingSpreeType.GodLike)),
                        PistolKills = x.Sum(y => y.Kills.Count(z => z.DamageType == "MOD_PISTOL_BULLET")),
                        SniperRifleKills = x.Sum(y => y.Kills.Count(z => z.DamageType == "MOD_RIFLE_BULLET" && snipers.Contains(z.Weapon))),
                        GrenadeKills = x.Sum(y => y.Kills.Count(z => z.DamageType == "MOD_GRENADE_SPLASH")),
                        MeleeKills = x.Sum(y => y.Kills.Count(z => z.DamageType == "MOD_MELEE")),
                        PistolDeaths = x.Sum(y => y.Deaths.Count(z => z.DamageType == "MOD_PISTOL_BULLET")),
                        RifleDeaths = x.Sum(y => y.Deaths.Count(z => z.DamageType == "MOD_RIFLE_BULLET")),
                        GrenadeDeaths = x.Sum(y => y.Deaths.Count(z => z.DamageType == "MOD_GRENADE_SPLASH")),
                        SniperRifleDeaths = x.Sum(y => y.Deaths.Count(z => z.DamageType == "MOD_RIFLE_BULLET" && snipers.Contains(z.Weapon))),
                    }).ToArray();
                var mostFrags = most.OrderByDescending(x => x.Frags);
                var mostKills = most.OrderByDescending(x => x.Kills).First();
                var mostDeaths = most.OrderByDescending(x => x.Deaths).First();
                var mostSuicides = most.OrderByDescending(x => x.Suicides).First();
                var mostHeadShots = most.OrderByDescending(x => x.HeadShots).First();
                var mostFph = most.OrderByDescending(x => x.FPH).First();
                var mostWins = most.OrderByDescending(x => x.Wins).First();

                var mostDoubleKills = most.OrderByDescending(x => x.DoubleKills).First();
                var mostMultiKills = most.OrderByDescending(x => x.MultiKills).First();
                var mostUltraKills = most.OrderByDescending(x => x.UltraKills).First();
                var mostMonsterKills = most.OrderByDescending(x => x.MonsterKills).First();

                var mostKillingSprees = most.OrderByDescending(x => x.KillingSprees).First();
                var mostRampages = most.OrderByDescending(x => x.Rampages).First();
                var mostDominatings = most.OrderByDescending(x => x.Dominatings).First();
                var mostUnstoppables = most.OrderByDescending(x => x.Unstoppables).First();
                var mostGodLikes = most.OrderByDescending(x => x.GodLikes).First();

                var mostPistolKills = most.OrderByDescending(x => x.PistolKills).First();
                var mostSniperRifleKills = most.OrderByDescending(x => x.SniperRifleKills).First();
                var mostGrenadeKills = most.OrderByDescending(x => x.GrenadeKills).First();
                var mostMeleeKills = most.OrderByDescending(x => x.MeleeKills).First();
                var mostPistolDeaths = most.OrderByDescending(x => x.PistolDeaths).First();
                var mostRifleDeaths = most.OrderByDescending(x => x.RifleDeaths).First();
                var mostGrenadeDeaths = most.OrderByDescending(x => x.GrenadeDeaths).First();
                var mostSniperRifleDeaths = most.OrderByDescending(x => x.SniperRifleDeaths).First();
            }
            <tbody class="text-center">

                @{ await MostTableRowTemplate("Most Frags", most, x => x.Frags, x => x.Frags > 0, "generic"); }
                <tr class="bg-dark"><td colspan="6" style="padding:1px"></td></tr>
                @{ await MostTableRowTemplate("Most Kills", most, x => x.Kills, x => x.Kills > 0, "pro_killer"); }
                <tr class="bg-dark"><td colspan="6" style="padding:1px"></td></tr>
                @{ await MostTableRowTemplate("Most Pistol Kills", most, x => x.PistolKills, x => x.PistolKills > 0, "pro_pistol"); }
                <tr class="bg-dark"><td colspan="6" style="padding:1px"></td></tr>
                @{ await MostTableRowTemplate("Most Sniper Rifle Kills", most, x => x.SniperRifleKills, x => x.SniperRifleKills > 0, "pro_sniper"); }
                <tr class="bg-dark"><td colspan="6" style="padding:1px"></td></tr>
                @{ await MostTableRowTemplate("Most Melee Kills", most, x => x.MeleeKills, x => x.MeleeKills > 0, "pro_slappyhappy"); }
                <tr class="bg-dark"><td colspan="6" style="padding:1px"></td></tr>
                @{ await MostTableRowTemplate("Most Grenade Kills", most, x => x.GrenadeKills, x => x.GrenadeKills > 0, "pro_explosivekiller"); }
                <tr class="bg-dark"><td colspan="6" style="padding:1px"></td></tr>
                @{ await MostTableRowTemplate("Most Deaths", most, x => x.Deaths, x => x.Deaths > 0, "anti_whiner"); }
                <tr class="bg-dark"><td colspan="6" style="padding:1px"></td></tr>
                @{ await MostTableRowTemplate("Most Pistol Deaths", most, x => x.PistolDeaths, x => x.PistolDeaths > 0); }
                <tr class="bg-dark"><td colspan="6" style="padding:1px"></td></tr>
                @{ await MostTableRowTemplate("Most Sniper Rifle Deaths", most, x => x.SniperRifleDeaths, x => x.SniperRifleDeaths > 0, "anti_no1target"); }
                <tr class="bg-dark"><td colspan="6" style="padding:1px"></td></tr>
                @{ await MostTableRowTemplate("Most Grenade Deaths", most, x => x.GrenadeDeaths, x => x.GrenadeDeaths > 0, "anti_nademagnet"); }
                <tr class="bg-dark"><td colspan="6" style="padding:1px"></td></tr>
                @{ await MostTableRowTemplate("Most Suicides", most, x => x.Suicides, x => x.Suicides > 0, "anti_suicide"); }
                <tr class="bg-dark"><td colspan="6" style="padding:1px"></td></tr>
                @{ await MostTableRowTemplate("Most Head Shots", most, x => x.HeadShots, x => x.HeadShots > 0, "pro_headshot"); }
                <tr class="bg-dark"><td colspan="6" style="padding:1px"></td></tr>
                @{ await MostTableRowTemplate("Highest FPH", most, x => x.FPH, x => x.FPH > 0, null, x => Math.Round(x.FPH, 2)); }
                <tr class="bg-dark"><td colspan="6" style="padding:1px"></td></tr>
                @{ await MostTableRowTemplate("Most Wins", most, x => x.Wins, x => x.Wins > 0); }

                <tr>
                    <th colspan="6" class="bg-danger text-white text-center">Most Multi Kills</th>
                </tr>

                @{ await MostTableRowTemplate("Double Kill", most, x => x.DoubleKills, x => x.DoubleKills > 0); }
                <tr class="bg-dark"><td colspan="6" style="padding:1px"></td></tr>
                @{ await MostTableRowTemplate("Multi Kill", most, x => x.MultiKills, x => x.MultiKills > 0); }
                <tr class="bg-dark"><td colspan="6" style="padding:1px"></td></tr>
                @{ await MostTableRowTemplate("Ultra Kill", most, x => x.UltraKills, x => x.UltraKills > 0); }
                <tr class="bg-dark"><td colspan="6" style="padding:1px"></td></tr>
                @{ await MostTableRowTemplate("Monster Kill", most, x => x.MonsterKills, x => x.MonsterKills > 0); }

                <tr>
                    <th colspan="6" class="bg-danger text-white text-center">Most Killing Sprees</th>
                </tr>

                @{ await MostTableRowTemplate("Killing Spree!", most, x => x.KillingSprees, x => x.KillingSprees > 0); }
                <tr class="bg-dark"><td colspan="6" style="padding:1px"></td></tr>
                @{ await MostTableRowTemplate("Rampage!", most, x => x.Rampages, x => x.Rampages > 0); }
                <tr class="bg-dark"><td colspan="6" style="padding:1px"></td></tr>
                @{ await MostTableRowTemplate("Dominating!", most, x => x.Dominatings, x => x.Dominatings > 0); }
                <tr class="bg-dark"><td colspan="6" style="padding:1px"></td></tr>
                @{ await MostTableRowTemplate("Unstoppable!", most, x => x.Unstoppables, x => x.Unstoppables > 0); }
                <tr class="bg-dark"><td colspan="6" style="padding:1px"></td></tr>
                @{ await MostTableRowTemplate("God Like!", most, x => x.GodLikes, x => x.GodLikes > 0); }
            </tbody>
        </table>
    </div>


    <div class="col mb-4">

        <table class="table table-striped table-bordered table-sm table-responsive-md">
            <thead class="text-center">
                <tr>
                    <th colspan="13" class="bg-danger text-white text-center">All Time</th>
                </tr>
                <tr>
                    <th>Name</th>
                    <th class="rotate90">Frags</th>
                    <th class="rotate90">Total Kills</th>
                    <th class="rotate90">Grenade Kills</th>
                    <th class="rotate90">Melee Kills</th>
                    <th class="rotate90">Head Shots</th>
                    <th class="rotate90">Deaths</th>
                    <th class="rotate90">Suicides</th>
                    <th class="rotate90">Efficiency</th>
                    <th class="rotate90">Frags Per Hour</th>
                    <th class="rotate90">Avg. Time to Live</th>
                    <th class="rotate90">Time</th>
                    <th class="rotate90">ELO</th>
                </tr>
            </thead>
            <tbody class="text-center">
                @foreach (var player in Model.Games.SelectMany(x => x.Players).GroupBy(x => x.Name).OrderByDescending(x => x.Sum(y => y.Kills.Count) - x.Sum(y => y.Sucides)).ThenByDescending(x => x.Sum(y => y.Kills.Count)))
                {
                    <tr>
                        <th><a asp-area="" asp-controller="Home" asp-action="Player" asp-route-id="@player.First().Name.PureName()">@Html.Raw(player.First().Name.FormatToHtml())</a></th>
                        <td>@(player.Sum(x => x.Kills.Count) - player.Sum(x => x.Sucides))</td>
                        <td>@player.Sum(y => y.Kills.Count)</td>
                        <td>@player.Sum(y => y.Kills.Count(x => x.DamageType == "MOD_GRENADE_SPLASH"))</td>
                        <td>@player.Sum(y => y.Kills.Count(x => x.DamageType == "MOD_MELEE"))</td>
                        <td>@player.Sum(y => y.Kills.Count(x => x.DamageType == "MOD_HEAD_SHOT"))</td>
                        <td>@player.Sum(y => y.Deaths.Count)</td>
                        <td>@player.Sum(y => y.Sucides)</td>
                        <td>@Math.Round((double)player.Sum(y => y.Kills.Count) / (player.Sum(y => y.Kills.Count) + player.Sum(y => y.Deaths.Count) + player.Sum(y => y.Sucides)) * 100, 1)%</td>
                        <td>@Math.Round((double)(player.Sum(y => y.Kills.Count) - player.Sum(y => y.Sucides)) / player.Sum(y => y.Duration.TotalHours), 1)</td>
                        <td>@Math.Round(player.Sum(y => y.Duration.TotalSeconds) / (player.Sum(y => y.Deaths.Count) + player.Sum(y => y.Sucides)), 1)</td>
                        <td>@TimeSpan.FromSeconds(player.Sum(y => y.Duration.TotalSeconds)).ToTimeSpan()</td>
                        <td>@elo[player.First().Name.PureName()].ToString("0.00")</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

</div>


@section Scripts {
    <script type="text/javascript">
        $(document).ready(function () {
            $('*[data-toggle="tooltip"]').tooltip();
        });
    </script>
}
